{
	"name": "Matches_Details_DataFlow",
	"properties": {
		"description": "Last Updated 03/06/2024",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "LiveScoreSink",
						"type": "DatasetReference"
					},
					"name": "LiveMatchesSource"
				},
				{
					"dataset": {
						"referenceName": "RecentMatchesSink",
						"type": "DatasetReference"
					},
					"name": "RecentMatchesSource"
				},
				{
					"dataset": {
						"referenceName": "UpcomingMatchesSink",
						"type": "DatasetReference"
					},
					"name": "UpcomingsMatchesSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "LiveScore",
						"type": "DatasetReference"
					},
					"name": "LiveMatchesSink"
				},
				{
					"dataset": {
						"referenceName": "RecentMatches",
						"type": "DatasetReference"
					},
					"name": "RecentMatchesSink"
				},
				{
					"dataset": {
						"referenceName": "Upcomingmatches",
						"type": "DatasetReference"
					},
					"name": "UpcomingMatchesSink"
				}
			],
			"transformations": [
				{
					"name": "LiveMatchesFlatten"
				},
				{
					"name": "LiveMatchesDerivedColumn"
				},
				{
					"name": "LiveMatchesCast"
				},
				{
					"name": "LiveMatchesAggregate"
				},
				{
					"name": "LiveMatchesFilter"
				},
				{
					"name": "LiveMatchesSelect"
				},
				{
					"name": "RecentMatchesFlatten"
				},
				{
					"name": "UpcomingMatchesFlatten"
				},
				{
					"name": "RecentMatchesCast"
				},
				{
					"name": "UpcomingMatchesCast"
				},
				{
					"name": "RecentMatchesDerivedColumn"
				},
				{
					"name": "UpcomingMatchesDerivedColumn"
				},
				{
					"name": "RecentMatchesAggregate"
				},
				{
					"name": "UpcomingMatchesAggregate"
				},
				{
					"name": "RecentMatchesFilter"
				},
				{
					"name": "UpcomingMatchesFilter"
				},
				{
					"name": "RecentMatchesSelect"
				},
				{
					"name": "UpcomingMatchesSelect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          typeMatches as (matchType as string, seriesMatches as (seriesAdWrapper as (seriesId as integer, seriesName as string, matches as (matchInfo as (matchId as integer, seriesId as integer, seriesName as string, matchDesc as string, matchFormat as string, startDate as string, endDate as string, state as string, status as string, team1 as (teamId as integer, teamName as string, teamSName as string, imageId as integer), team2 as (teamId as integer, teamName as string, teamSName as string, imageId as integer), venueInfo as (id as integer, ground as string, city as string, timezone as string, latitude as string, longitude as string), currBatTeamId as integer, seriesStartDt as string, seriesEndDt as string, isTimeAnnounced as boolean, stateTitle as string), matchScore as (team1Score as (inngs1 as (inningsId as integer, runs as integer, wickets as integer, overs as double)), team2Score as (inngs1 as (inningsId as integer, runs as integer, wickets as integer, overs as double))))[]))[])[],",
				"          filters as (matchType as string[]),",
				"          appIndex as (seoTitle as string, webURL as string),",
				"          responseLastUpdated as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> LiveMatchesSource",
				"source(output(",
				"          typeMatches as (matchType as string, seriesMatches as (seriesAdWrapper as (seriesId as integer, seriesName as string, matches as (matchInfo as (matchId as integer, seriesId as integer, seriesName as string, matchDesc as string, matchFormat as string, startDate as string, endDate as string, state as string, status as string, team1 as (teamId as integer, teamName as string, teamSName as string, imageId as integer), team2 as (teamId as integer, teamName as string, teamSName as string, imageId as integer), venueInfo as (id as integer, ground as string, city as string, timezone as string, latitude as string, longitude as string), currBatTeamId as integer, seriesStartDt as string, seriesEndDt as string, isTimeAnnounced as boolean, stateTitle as string), matchScore as (team1Score as (inngs1 as (inningsId as integer, runs as integer, wickets as integer, overs as double), inngs2 as (inningsId as integer, runs as integer, wickets as integer, overs as double)), team2Score as (inngs1 as (inningsId as integer, runs as integer, wickets as integer, overs as double), inngs2 as (inningsId as integer, runs as integer, wickets as integer, overs as double))))[]))[])[],",
				"          filters as (matchType as string[]),",
				"          appIndex as (seoTitle as string, webURL as string),",
				"          responseLastUpdated as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> RecentMatchesSource",
				"source(output(",
				"          typeMatches as (matchType as string, seriesMatches as (seriesAdWrapper as (seriesId as integer, seriesName as string, matches as (matchInfo as (matchId as integer, seriesId as integer, seriesName as string, matchDesc as string, matchFormat as string, startDate as string, endDate as string, state as string, status as string, team1 as (teamId as integer, teamName as string, teamSName as string, imageId as integer), team2 as (teamId as integer, teamName as string, teamSName as string, imageId as integer), venueInfo as (id as integer, ground as string, city as string, timezone as string, latitude as string, longitude as string), seriesStartDt as string, seriesEndDt as string, isTimeAnnounced as boolean, stateTitle as string))[]))[])[],",
				"          filters as (matchType as string[]),",
				"          appIndex as (seoTitle as string, webURL as string),",
				"          responseLastUpdated as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> UpcomingsMatchesSource",
				"LiveMatchesSource foldDown(unrollMultiple(typeMatches,typeMatches.seriesMatches,typeMatches.seriesMatches.seriesAdWrapper.matches,filters.matchType),",
				"     mapColumn(",
				"          match_type = typeMatches.matchType,",
				"          seriesId = typeMatches.seriesMatches.seriesAdWrapper.seriesId,",
				"          seriesName = typeMatches.seriesMatches.seriesAdWrapper.seriesName,",
				"          matchId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchId,",
				"          matchDesc = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchDesc,",
				"          matchFormat = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchFormat,",
				"          matchstartDate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.startDate,",
				"          matchendDate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.endDate,",
				"          matchstate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.state,",
				"          matchstatus = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.status,",
				"          team1Id = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamId,",
				"          team1Name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamName,",
				"          team1SName = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamSName,",
				"          team2Id = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamId,",
				"          team2Name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamName,",
				"          team2SName = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamSName,",
				"          venueid = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.id,",
				"          match_ground_name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.ground,",
				"          match_city = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.city,",
				"          timezone = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.timezone,",
				"          latitude = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.latitude,",
				"          longitude = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.longitude,",
				"          currBatTeamId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.currBatTeamId,",
				"          team1_innings1_inningsId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.inningsId,",
				"          team1_innings1_runs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.runs,",
				"          team1_innings1_wickets = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.wickets,",
				"          team1_innings1_overs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.overs,",
				"          team2_innings1_inningsId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.inningsId,",
				"          team2_innings1_runs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.runs,",
				"          team2_innings1_wickets = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.wickets,",
				"          team2_innings1_overs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.overs,",
				"          responseLastUpdated",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> LiveMatchesFlatten",
				"LiveMatchesCast derive(timezone = (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60),",
				"          matchstartDate = toDate(toTimestamp(matchstartDate) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60)),",
				"          matchendDate = toDate(toTimestamp(matchendDate) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60)),",
				"          responseLastUpdated = toDate(toTimestamp(responseLastUpdated) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60))) ~> LiveMatchesDerivedColumn",
				"LiveMatchesFlatten cast(output(",
				"          matchstartDate as long,",
				"          matchendDate as long,",
				"          timezone as string,",
				"          responseLastUpdated as long",
				"     ),",
				"     errors: true) ~> LiveMatchesCast",
				"LiveMatchesDerivedColumn aggregate(groupBy(match_type,",
				"          seriesId,",
				"          seriesName,",
				"          matchId,",
				"          matchDesc,",
				"          matchFormat,",
				"          matchstartDate,",
				"          matchendDate,",
				"          matchstate,",
				"          matchstatus,",
				"          team1Id,",
				"          team1Name,",
				"          team1SName,",
				"          team2Id,",
				"          team2Name,",
				"          team2SName,",
				"          venueid,",
				"          match_ground_name,",
				"          match_city,",
				"          timezone,",
				"          latitude,",
				"          longitude,",
				"          currBatTeamId,",
				"          team1_innings1_inningsId,",
				"          team1_innings1_runs,",
				"          team1_innings1_wickets,",
				"          team1_innings1_overs,",
				"          team2_innings1_inningsId,",
				"          team2_innings1_runs,",
				"          team2_innings1_wickets,",
				"          team2_innings1_overs),",
				"     test = sum(1)) ~> LiveMatchesAggregate",
				"LiveMatchesAggregate filter(not(isNull(seriesId))) ~> LiveMatchesFilter",
				"LiveMatchesFilter select(mapColumn(",
				"          match_type,",
				"          seriesId,",
				"          seriesName,",
				"          matchId,",
				"          matchDesc,",
				"          matchFormat,",
				"          matchstartDate,",
				"          matchendDate,",
				"          matchstate,",
				"          matchstatus,",
				"          team1Id,",
				"          team1Name,",
				"          team1SName,",
				"          team2Id,",
				"          team2Name,",
				"          team2SName,",
				"          venueid,",
				"          match_ground_name,",
				"          match_city,",
				"          timezone,",
				"          latitude,",
				"          longitude,",
				"          currBatTeamId,",
				"          team1inningsId = team1_innings1_inningsId,",
				"          team1runs = team1_innings1_runs,",
				"          team1wickets = team1_innings1_wickets,",
				"          team1overs = team1_innings1_overs,",
				"          team2inningsId = team1_innings1_inningsId,",
				"          team2runs = team2_innings1_runs,",
				"          team2wickets = team2_innings1_wickets,",
				"          team2overs = team2_innings1_overs",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LiveMatchesSelect",
				"RecentMatchesSource foldDown(unrollMultiple(typeMatches,typeMatches.seriesMatches,typeMatches.seriesMatches.seriesAdWrapper.matches,filters.matchType),",
				"     mapColumn(",
				"          match_type = typeMatches.matchType,",
				"          seriesId = typeMatches.seriesMatches.seriesAdWrapper.seriesId,",
				"          seriesName = typeMatches.seriesMatches.seriesAdWrapper.seriesName,",
				"          matchId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchId,",
				"          matchDesc = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchDesc,",
				"          matchFormat = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchFormat,",
				"          matchstartDate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.startDate,",
				"          matchendDate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.endDate,",
				"          matchstate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.state,",
				"          matchstatus = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.status,",
				"          team1Id = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamId,",
				"          team1Name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamName,",
				"          team1SName = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamSName,",
				"          team2Id = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamId,",
				"          team2Name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamName,",
				"          team2SName = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamSName,",
				"          venueid = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.id,",
				"          match_ground_name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.ground,",
				"          match_city = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.city,",
				"          timezone = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.timezone,",
				"          latitude = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.latitude,",
				"          longitude = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.longitude,",
				"          currBatTeamId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.currBatTeamId,",
				"          team1_innings1_inningsId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.inningsId,",
				"          team1_innings1_runs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.runs,",
				"          team1_innings1_wickets = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.wickets,",
				"          team1_innings1_overs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs1.overs,",
				"          team1_innings2_inningsId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs2.inningsId,",
				"          team1_innings2_runs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs2.runs,",
				"          team1_innings2_wickets = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs2.wickets,",
				"          team1_innings2_overs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team1Score.inngs2.overs,",
				"          team2_innings1_inningsId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.inningsId,",
				"          team2_innings1_runs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.runs,",
				"          team2_innings1_wickets = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.wickets,",
				"          team2_innings1_overs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs1.overs,",
				"          team2_innings2_inningsId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs2.inningsId,",
				"          team2_innings2_runs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs2.runs,",
				"          team2_innings2_wickets = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs2.wickets,",
				"          team2_innings2_overs = typeMatches.seriesMatches.seriesAdWrapper.matches.matchScore.team2Score.inngs2.overs,",
				"          responseLastUpdated",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> RecentMatchesFlatten",
				"UpcomingsMatchesSource foldDown(unrollMultiple(typeMatches,typeMatches.seriesMatches,typeMatches.seriesMatches.seriesAdWrapper.matches,filters.matchType),",
				"     mapColumn(",
				"          match_type = typeMatches.matchType,",
				"          seriesId = typeMatches.seriesMatches.seriesAdWrapper.seriesId,",
				"          seriesName = typeMatches.seriesMatches.seriesAdWrapper.seriesName,",
				"          matchId = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchId,",
				"          matchDesc = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchDesc,",
				"          matchFormat = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.matchFormat,",
				"          matchstartDate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.startDate,",
				"          matchendDate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.endDate,",
				"          matchstate = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.state,",
				"          matchstatus = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.status,",
				"          team1Id = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamId,",
				"          team1Name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamName,",
				"          team1SName = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team1.teamSName,",
				"          team2Id = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamId,",
				"          team2Name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamName,",
				"          team2SName = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.team2.teamSName,",
				"          venueid = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.id,",
				"          match_ground_name = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.ground,",
				"          match_city = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.city,",
				"          timezone = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.timezone,",
				"          latitude = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.latitude,",
				"          longitude = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.venueInfo.longitude,",
				"          isTimeAnnounced = typeMatches.seriesMatches.seriesAdWrapper.matches.matchInfo.isTimeAnnounced,",
				"          responseLastUpdated",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UpcomingMatchesFlatten",
				"RecentMatchesFlatten cast(output(",
				"          matchstartDate as long,",
				"          matchendDate as long,",
				"          timezone as string,",
				"          responseLastUpdated as long",
				"     ),",
				"     errors: true) ~> RecentMatchesCast",
				"UpcomingMatchesFlatten cast(output(",
				"          matchstartDate as long,",
				"          matchendDate as long,",
				"          timezone as string,",
				"          responseLastUpdated as long",
				"     ),",
				"     errors: true) ~> UpcomingMatchesCast",
				"RecentMatchesCast derive(timezone = (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60),",
				"          matchstartDate = toDate(toTimestamp(matchstartDate) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60)),",
				"          matchendDate = toDate(toTimestamp(matchendDate) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60)),",
				"          responseLastUpdated = toDate(responseLastUpdated + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60))) ~> RecentMatchesDerivedColumn",
				"UpcomingMatchesCast derive(timezone = (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60),",
				"          matchstartDate = toDate(toTimestamp(matchstartDate) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60)),",
				"          matchendDate = toDate(toTimestamp(matchendDate) + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60)),",
				"          responseLastUpdated = toDate(responseLastUpdated + (toInteger(substring(timezone,1,3)) * 3600)  + (toInteger(substring(timezone,5,2)) * 60))) ~> UpcomingMatchesDerivedColumn",
				"RecentMatchesDerivedColumn aggregate(groupBy(match_type,",
				"          seriesId,",
				"          seriesName,",
				"          matchId,",
				"          matchDesc,",
				"          matchFormat,",
				"          matchstartDate,",
				"          matchendDate,",
				"          matchstate,",
				"          matchstatus,",
				"          team1Id,",
				"          team1Name,",
				"          team1SName,",
				"          team2Id,",
				"          team2Name,",
				"          team2SName,",
				"          venueid,",
				"          match_ground_name,",
				"          match_city,",
				"          timezone,",
				"          latitude,",
				"          longitude,",
				"          currBatTeamId,",
				"          team1_innings1_inningsId,",
				"          team1_innings1_runs,",
				"          team1_innings1_wickets,",
				"          team1_innings1_overs,",
				"          team1_innings2_inningsId,",
				"          team1_innings2_runs,",
				"          team1_innings2_wickets,",
				"          team1_innings2_overs,",
				"          team2_innings1_inningsId,",
				"          team2_innings1_runs,",
				"          team2_innings1_wickets,",
				"          team2_innings1_overs,",
				"          team2_innings2_inningsId,",
				"          team2_innings2_runs,",
				"          team2_innings2_wickets,",
				"          team2_innings2_overs,",
				"          responseLastUpdated),",
				"     test = sum(1)) ~> RecentMatchesAggregate",
				"UpcomingMatchesDerivedColumn aggregate(groupBy(match_type,",
				"          seriesId,",
				"          seriesName,",
				"          matchId,",
				"          matchDesc,",
				"          matchFormat,",
				"          matchstartDate,",
				"          matchendDate,",
				"          matchstate,",
				"          matchstatus,",
				"          team1Id,",
				"          team1Name,",
				"          team1SName,",
				"          team2Id,",
				"          team2Name,",
				"          team2SName,",
				"          venueid,",
				"          match_ground_name,",
				"          match_city,",
				"          timezone,",
				"          latitude,",
				"          longitude,",
				"          isTimeAnnounced,",
				"          responseLastUpdated),",
				"     test = sum(1)) ~> UpcomingMatchesAggregate",
				"RecentMatchesAggregate filter(not(isNull(seriesId))) ~> RecentMatchesFilter",
				"UpcomingMatchesAggregate filter(not(isNull(seriesId))) ~> UpcomingMatchesFilter",
				"RecentMatchesFilter select(mapColumn(",
				"          match_type,",
				"          seriesId,",
				"          seriesName,",
				"          matchId,",
				"          matchDesc,",
				"          matchFormat,",
				"          matchstartDate,",
				"          matchendDate,",
				"          matchstate,",
				"          matchstatus,",
				"          team1Id,",
				"          team1Name,",
				"          team1SName,",
				"          team2Id,",
				"          team2Name,",
				"          team2SName,",
				"          venueid,",
				"          match_ground_name,",
				"          match_city,",
				"          timezone,",
				"          latitude,",
				"          longitude,",
				"          currBatTeamId,",
				"          team1_innings1_inningsId,",
				"          team1_innings1_runs,",
				"          team1_innings1_wickets,",
				"          team1_innings1_overs,",
				"          team1_innings2_inningsId,",
				"          team1_innings2_runs,",
				"          team1_innings2_wickets,",
				"          team1_innings2_overs,",
				"          team2_innings1_inningsId,",
				"          team2_innings1_runs,",
				"          team2_innings1_wickets,",
				"          team2_innings1_overs,",
				"          team2_innings2_inningsId,",
				"          team2_innings2_runs,",
				"          team2_innings2_wickets,",
				"          team2_innings2_overs,",
				"          responseLastUpdated",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RecentMatchesSelect",
				"UpcomingMatchesFilter select(mapColumn(",
				"          match_type,",
				"          seriesId,",
				"          seriesName,",
				"          matchId,",
				"          matchDesc,",
				"          matchFormat,",
				"          matchstartDate,",
				"          matchendDate,",
				"          matchstate,",
				"          matchstatus,",
				"          team1Id,",
				"          team1Name,",
				"          team1SName,",
				"          team2Id,",
				"          team2Name,",
				"          team2SName,",
				"          venueid,",
				"          match_ground_name,",
				"          match_city,",
				"          timezone,",
				"          latitude,",
				"          longitude,",
				"          isTimeAnnounced,",
				"          responseLastUpdated",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UpcomingMatchesSelect",
				"LiveMatchesSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['live_scores.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> LiveMatchesSink",
				"RecentMatchesSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['recent_matches.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> RecentMatchesSink",
				"UpcomingMatchesSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['upcoming_matches.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> UpcomingMatchesSink"
			]
		}
	}
}